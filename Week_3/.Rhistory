return(values_2)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
two_sum(nums_vector,target)
#expected answers
#[1] 10  5
#[1] 8 7
#[1] 9 6
#[1]  5 10
#[1] 7 8
#[1] 6 9
install.packages("hash")
two_sum <- function(nums_vector,target){
values_1 <- list() # Empty vector for answer
for(i in seq_along(nums_vector)) { # Loop through each index in nums_vector
for(j in seq_along(nums_vector)) { # Loop through each vector in nums_vector again
if((i != j) && (nums_vector[i] + nums_vector[j] == target)) { # Check for when i and j are different and sum equals target
values_1 <- c(values_1, list(c(i, j)))
# If the condition is met, they get added to the values_1 vector
}
}
}
return(values_1)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
two_sum(nums_vector,target)
#expected answers
#[1] 1 7
#[1] 2 5
#[1] 5 2
library(hash)
two_sum <- function(nums_vector,target){
values_2 <- list() # Empty vector for answer
hash_map <- hash() # Empty vector for hash map
for(i in nums_vector) {
j <- target - i # Iterate through each value in the vector and calculate the complement needed to equal the target (j)
if(j %in% keys(hash_map)) {
matching_pair <- c(i, j)
values_2 <- c(values_2, list(matching_pair))
} # If the complement (j) is found in the hash map, then assign to matching_pair and assign to values_2
}
return(values_2)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
two_sum(nums_vector,target)
#expected answers
#[1] 10  5
#[1] 8 7
#[1] 9 6
#[1]  5 10
#[1] 7 8
#[1] 6 9
library(hash)
two_sum <- function(nums_vector,target){
values_2 <- list() # Empty vector for answer
hash_map <- hash() # Empty vector for hash map
for(i in nums_vector) {
j <- target - i # Iterate through each value in the vector and calculate the complement needed to equal the target (j)
if(j %in% keys(hash_map)) {
matching_pair <- c(i, j)
values_2 <- c(values_2, list(matching_pair))
} # If the complement (j) is found in the hash map, then assign to matching_pair and assign to values_2
hash_map[[i]] <- i
}
return(values_2)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
two_sum(nums_vector,target)
library(hash)
two_sum <- function(nums_vector,target){
values_2 <- list() # Empty vector for answer
hash_map <- hash() # Empty vector for hash map
for(i in nums_vector) {
j <- target - i # Iterate through each value in the vector and calculate the complement needed to equal the target (j)
if(j %in% keys(hash_map)) {
matching_pair <- c(i, j)
values_2 <- c(values_2, list(matching_pair))
} # If the complement (j) is found in the hash map, then assign to matching_pair and assign to values_2
hash_map[[as.character(i)]] <- i
}
return(values_2)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
two_sum(nums_vector,target)
#expected answers
#[1] 10  5
#[1] 8 7
#[1] 9 6
#[1]  5 10
#[1] 7 8
#[1] 6 9
two_sum <- function(nums_vector,target){
values_1 <- list() # Empty vector for answer
for(i in seq_along(nums_vector)) { # Loop through each index in nums_vector
for(j in seq_along(nums_vector)) { # Loop through each vector in nums_vector again
if((i != j) && (nums_vector[i] + nums_vector[j] == target)) { # Check for when i and j are different and sum equals target
values_1 <- c(values_1, list(c(i, j)))
# If the condition is met, they get added to the values_1 vector
}
}
}
return(values_1)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
two_sum(nums_vector,target)
#expected answers
#[1] 1 7
#[1] 2 5
#[1] 5 2
library(hash)
two_sum <- function(nums_vector,target){
values_2 <- list() # Empty vector for answer
hash_map <- hash() # Empty vector for hash map
for(i in nums_vector) {
j <- target - i # Iterate through each value in the vector and calculate the complement needed to equal the target (j)
if(j %in% keys(hash_map)) {
matching_pair <- c(i, j)
values_2 <- c(values_2, list(matching_pair))
} # If the complement (j) is found in the hash map, then assign to matching_pair and assign to values_2
hash_map[[as.character(i)]] <- i
} # Adds current value i as a key to the hash map
return(values_2)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
two_sum(nums_vector,target)
#expected answers
#[1] 10  5
#[1] 8 7
#[1] 9 6
#[1]  5 10
#[1] 7 8
#[1] 6 9
two_sum <- function(nums_vector,target){
values_1 <- list() # Empty vector for answer
for(i in seq_along(nums_vector)) { # Loop through each index in nums_vector
for(j in seq_along(nums_vector)) { # Loop through each vector in nums_vector again
if((i != j) && (nums_vector[i] + nums_vector[j] == target)) { # Check for when i and j are different and sum equals target
values_1 <- c(values_1, list(c(i, j)))
# If the condition is met, they get added to the values_1 vector
}
}
}
return(values_1)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
two_sum(nums_vector,target)
#expected answers
#[1] 1 7
#[1] 2 5
#[1] 5 2
library(hash)
two_sum <- function(nums_vector,target){
values_2 <- list() # Empty vector for answer
hash_map <- hash() # Empty vector for hash map
for(i in nums_vector) {
j <- target - i # Iterate through each value in the vector and calculate the complement needed to equal the target (j)
if(j %in% keys(hash_map)) {
matching_pair <- c(i, j)
values_2 <- c(values_2, list(matching_pair))
} # If the complement (j) is found in the hash map, then assign to matching_pair and assign to values_2
hash_map[[as.character(i)]] <- i
} # Adds current value i as a key to the hash map
return(values_2)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
two_sum(nums_vector,target)
#expected answers
#[1] 10  5
#[1] 8 7
#[1] 9 6
#[1]  5 10
#[1] 7 8
#[1] 6 9
library(hash)
two_sum <- function(nums_vector,target){
values_2 <- list() # Empty vector for answer
hash_map <- hash() # Empty vector for hash map
for(i in nums_vector) {
j <- target - i # Iterate through each value in the vector and calculate the complement needed to equal the target (j)
if(j %in% keys(hash_map)) {
matching_pair <- c(i, j)
values_2 <- c(values_2, list(matching_pair))
} # If the complement (j) is found in the hash map, then assign to matching_pair and assign to values_2
hash_map[[as.character(i)]] <- j
} # Adds current value i as a key to the hash map
return(values_2)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
two_sum(nums_vector,target)
#expected answers
#[1] 10  5
#[1] 8 7
#[1] 9 6
#[1]  5 10
#[1] 7 8
#[1] 6 9
library(hash)
two_sum <- function(nums_vector,target){
values_2 <- list() # Empty vector for answer
hash_map <- hash() # Empty vector for hash map
for(i in nums_vector) {
j <- target - i # Iterate through each value in the vector and calculate the complement needed to equal the target (j)
if(j %in% keys(hash_map) && (i != j)) {
matching_pair <- c(i, j)
values_2 <- c(values_2, list(matching_pair))
} # If the complement (j) is found in the hash map, then assign to matching_pair and assign to values_2
hash_map[[as.character(i)]] <- j
} # Adds j as a key to the hash map
return(values_2)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
two_sum(nums_vector,target)
#expected answers
#[1] 10  5
#[1] 8 7
#[1] 9 6
#[1]  5 10
#[1] 7 8
#[1] 6 9
library(hash)
two_sum <- function(nums_vector,target){
values_2 <- list() # Empty vector for answer
hash_map <- hash() # Empty vector for hash map
for(i in nums_vector) {
j <- target - i # Iterate through each value in the vector and calculate the complement needed to equal the target (j)
if(j %in% keys(hash_map) && (i != j)) {
matching_pair <- c(i, j)
values_2 <- c(values_2, list(matching_pair))
} # If the complement (j) is found in the hash map, then assign to matching_pair and assign to values_2
hash_map[[as.character(i)]] <- j
} # Adds j as a key to the hash map
return(values_2)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 16
two_sum(nums_vector,target)
#expected answers
#[1] 10  5
#[1] 8 7
#[1] 9 6
#[1]  5 10
#[1] 7 8
#[1] 6 9
library(hash)
two_sum <- function(nums_vector,target){
values_2 <- list() # Empty vector for answer
hash_map <- hash() # Empty vector for hash map
for(i in nums_vector) {
j <- target - i # Iterate through each value in the vector and calculate the complement needed to equal the target (j)
if(j %in% keys(hash_map) && (i != j)) {
matching_pair <- c(i, j)
values_2 <- c(values_2, list(matching_pair))
} # If the complement (j) is found in the hash map, then assign to matching_pair and assign to values_2
hash_map[[as.character(i)]] <- j
} # Adds j as a key to the hash map
return(values_2)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
two_sum(nums_vector,target)
#expected answers
#[1] 10  5
#[1] 8 7
#[1] 9 6
#[1]  5 10
#[1] 7 8
#[1] 6 9
hash_map
two_sum <- function(nums_vector,target){
values_1 <- list() # Empty vector for answer
for(i in seq_along(nums_vector)) { # Loop through each index in nums_vector
for(j in seq_along(nums_vector)) { # Loop through each vector in nums_vector again
if((i != j) && (nums_vector[i] + nums_vector[j] == target)) { # Check for when i and j are different and sum equals target
values_1 <- c(values_1, list(c(i, j)))
# If the condition is met, they get added to the values_1 vector
}
}
}
return(values_1)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
two_sum(nums_vector,target)
#expected answers
#[1] 1 7
#[1] 2 5
#[1] 5 2
library(hash)
two_sum <- function(nums_vector,target){
values_2 <- list() # Empty vector for answer
hash_map <- hash() # Empty vector for hash map
for(i in nums_vector) {
hash_map[[as.character(i)]] <- j
j <- target - i # Iterate through each value in the vector and calculate the complement needed to equal the target (j)
if(j %in% keys(hash_map) && (i != j)) {
matching_pair <- c(i, j)
values_2 <- c(values_2, list(matching_pair))
} # If the complement (j) is found in the hash map, then assign to matching_pair and assign to values_2
} # Adds j as keys to the hash map
return(values_2)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
two_sum(nums_vector,target)
library(hash)
two_sum <- function(nums_vector,target){
values_2 <- list() # Empty vector for answer
hash_map <- hash() # Empty vector for hash map
for(i in nums_vector) {
j <- target - i # Iterate through each value in the vector and calculate the complement needed to equal the target (j)
hash_map[[as.character(i)]] <- j
if(j %in% keys(hash_map) && (i != j)) {
matching_pair <- c(i, j)
values_2 <- c(values_2, list(matching_pair))
} # If the complement (j) is found in the hash map, then assign to matching_pair and assign to values_2
} # Adds j as keys to the hash map
return(values_2)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
two_sum(nums_vector,target)
#expected answers
#[1] 10  5
#[1] 8 7
#[1] 9 6
#[1]  5 10
#[1] 7 8
#[1] 6 9
library(hash)
two_sum <- function(nums_vector,target){
values_2 <- list() # Empty vector for answer
hash_map <- hash() # Empty vector for hash map
for(i in nums_vector) {
j <- target - i # Iterate through each value in the vector and calculate the complement needed to equal the target (j)
hash_map[[as.character(i)]] <- j
# Adds j as keys to the hash map
if(j %in% keys(hash_map) && (i != j)) {
matching_pair <- c(i, j)
values_2 <- c(values_2, list(matching_pair))
} # If the complement (j) is found in the hash map, then assign to matching_pair and assign to values_2
}
return(values_2)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
two_sum(nums_vector,target)
#expected answers
#[1] 10  5
#[1] 8 7
#[1] 9 6
#[1]  5 10
#[1] 7 8
#[1] 6 9
library(hash)
two_sum <- function(nums_vector,target){
values_2 <- list() # Empty vector for answer
hash_map <- hash() # Empty vector for hash map
for(i in nums_vector) {
j <- target - i # Iterate through each value in the vector and calculate the complement needed to equal the target (j)
hash_map[[as.character(i)]] <- j
# Adds j as keys to the hash map
if(j %in% keys(hash_map) && (i != j)) {
matching_pair_2 <- c(i, j)
values_2 <- c(values_2, list(matching_pair_2))
} # If the complement (j) is found in the hash map, then assign to matching_pair and assign to values_2
}
return(values_2)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
two_sum(nums_vector,target)
#expected answers
#[1] 10  5
#[1] 8 7
#[1] 9 6
#[1]  5 10
#[1] 7 8
#[1] 6 9
two_sum <- function(nums_vector,target){
values_1 <- list() # Empty vector for answer
for(i in seq_along(nums_vector)) {
# Loop through each value in nums_vector
for(j in seq_along(nums_vector)) {
# Loop through each value in nums_vector again
if((i != j) && (nums_vector[i] + nums_vector[j] == target)) {
# Check for when i and j are different and sum equals target
values_1 <- c(values_1, list(c(i, j)))
# If the condition is met, they get added to the values_1 vector
}
}
}
return(values_1)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
two_sum(nums_vector,target)
#expected answers
#[1] 1 7
#[1] 2 5
#[1] 5 2
two_sum <- function(nums_vector,target){
values_1 <- list() # Empty vector for answer
for(i in seq_along(nums_vector)) {
# Loop through each value in nums_vector
for(j in (i + 1):length(nums_vector)) {
# Loop through each value in nums_vector again
if((i != j) && (nums_vector[i] + nums_vector[j] == target)) {
# Check for when i and j are different and sum equals target
values_1 <- c(values_1, list(c(i, j)))
# If the condition is met, they get added to the values_1 vector
}
}
}
return(values_1)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
two_sum(nums_vector,target)
two_sum <- function(nums_vector,target){
values_1 <- list() # Empty vector for answer
for(i in seq_along(nums_vector)) {
# Loop through each value in nums_vector
for(j in (i + 1):length(nums_vector)) {
# Loop through each value in nums_vector again
if((i != j) && (nums_vector[i] + nums_vector[j] == target)) {
# Check for when i and j are different and sum equals target
pair <- c(i, j)
values_1 <- c(values_1, list(c(i, j)))
# If the condition is met, they get added to the values_1 vector
}
}
}
return(values_1)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
two_sum(nums_vector,target)
two_sum <- function(nums_vector,target){
values_1 <- list() # Empty vector for answer
for(i in seq_along(nums_vector)) {
# Loop through each value in nums_vector
for(j in (i + 1):length(nums_vector)) {
# Loop through each value in nums_vector again
if((i != j) && (nums_vector[i] + nums_vector[j] == target)) {
# Check for when i and j are different and sum equals target
pair <- c(i, j)
values_1 <- c(values_1, list(c(i, j)))
# If the condition is met, they get added to the values_1 vector
}
}
}
return(values_1)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
two_sum(nums_vector,target)
two_sum <- function(nums_vector,target){
values_1 <- list() # Empty vector for answer
for(i in seq_along(nums_vector)) {
# Loop through each value in nums_vector
for(j in seq_along(nums_vector)) {
# Loop through each value in nums_vector again
if((i != j) && (nums_vector[i] + nums_vector[j] == target)) {
# Check for when i and j are different and sum equals target
values_1 <- c(values_1, list(c(i, j)))
# If the condition is met, they get added to the values_1 vector
}
}
}
return(values_1)
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
two_sum(nums_vector,target)
#expected answers
#[1] 1 7
#[1] 2 5
#[1] 5 2
